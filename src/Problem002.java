import java.util.ArrayList;

public class Problem002 {
    /*
    Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
    By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
     */
    public static void main(String[] args) {
        approach2();

    }

    public static void approach2() {
        // store the fibonacci sequence in an ArrayList
        ArrayList<Integer> fibonacci = new ArrayList<>();
        fibonacci.add(1);
        fibonacci.add(2);

        //creates fibonacci sequence
        while(sumLastTwoElements(fibonacci) <= 4_000_000) {
            fibonacci.add(sumLastTwoElements(fibonacci));
        }
        System.out.println(fibonacci);

        //sum up all even terms
        System.out.println();
        int sum = 0;
        for(Integer i : fibonacci) {
            if(i % 2 == 0) {
                System.out.print(i + ", ");
                sum += i;
            }
        }
        System.out.println("The sum of all even terms is: " + sum);
    }

    public static int sumLastTwoElements(ArrayList<Integer> arrayList) {
        int size = arrayList.size();
        return arrayList.get(size - 1) + arrayList.get(size - 2);
    }

    // this is not a working solution
    public static void approach1() {
        int term1 = 1;
        int term2 = 2;
        int index = 1;
        int maxTermAmount = 100;
        int curTerm = term1 + term2;
        while (term1 <= maxTermAmount && term2 <= maxTermAmount) {
            if (index % 2 == 1) {
                term1 = term1 + term2;
                System.out.println(term1);
            } else {
                term2 = term1 + term2;
                System.out.println(term2);
            }
            index++;
        }
    }
}
